buildscript {
    repositories {
        maven { url rootProject.ext.repositories.fabric }
    }
    dependencies {
        classpath rootProject.ext.thirdPartyDeps.fabricGradle
    }
}

apply plugin: rootProject.ext.plugins.application
apply plugin: rootProject.ext.plugins.fabric

android {
    useLibrary rootProject.ext.libraries.apacheHttp

    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId

        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion

        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.each {
        it.buildConfigField 'String', 'DBT_KEY', DigitalBibleApiKey
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //    wearApp project(':wear')
    compile rootProject.ext.googleDeps.appCompat
    compile rootProject.ext.googleDeps.coreUtils
    compile rootProject.ext.googleDeps.constraintLayout
    compile rootProject.ext.googleDeps.playServicesWearable
    compile rootProject.ext.googleDeps.ads
    compile rootProject.ext.googleDeps.firebaseCore
    compile rootProject.ext.googleDeps.firebaseDb
    compile rootProject.ext.googleDeps.firebaseAuth
    compile rootProject.ext.googleDeps.googleServices
    compile rootProject.ext.googleDeps.roomRuntime

    compile rootProject.ext.thirdPartyDeps.butterKnife
    compile rootProject.ext.thirdPartyDeps.rssClient
    compile rootProject.ext.thirdPartyDeps.timesSquare
    compile rootProject.ext.thirdPartyDeps.seismic
    compile rootProject.ext.thirdPartyDeps.bibleApi
    compile(rootProject.ext.thirdPartyDeps.fabric) {
        transitive = true
    }

    annotationProcessor rootProject.ext.googleDeps.roomCompiler
    annotationProcessor rootProject.ext.thirdPartyDeps.butterKnifeCompiler
}

apply plugin: rootProject.ext.plugins.googleServices